pipeline {
    agent any
    
   

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "mvn"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git url: 'https://github.com/MaheshNvivek/spring-jenkins-pipeline-groovy-demo1.git'

                // Run Maven on a Unix agent.
                script{
                if(isUnix()){
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
				}	
                else{
                 bat "mvn -Dmaven.test.failure.ignore=true clean package"
                 }
                 }
            }
            }
            
           
           
         stage('Integration Test') {
            steps {
               
                // Run Maven on a Unix agent.
                script{
                if(isUnix()){
                sh "mvn -Dmaven.test.failure.ignore=true clean verify"
				}	
                else{
                 bat "mvn -Dmaven.test.failure.ignore=true clean verify"
                 }
                 }
            }
        
    	}
    	
    	
    	
    	
    }
     post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    jacoco(
                    
                    classPattern: '**/target/classes',
                    sourcePattern: '**/src/main/groovy'
                    
                    )
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                    
                }
            }
            
        
}


    environment {
        DOCKER_IMAGE_NAME = 'my-docker-image'
        DOCKER_CONTAINER_NAME = 'my-docker-container'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE_NAME} ."
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run Docker container
                    sh "docker run --name ${DOCKER_CONTAINER_NAME} -d -p 8080:80 ${DOCKER_IMAGE_NAME}"
                }
            }
        }
    }

    post {
        success {
            echo "Docker image built and container running successfully!"
        }

        failure {
            echo "Failed to build Docker image or run container."
        }

        always {
            script {
                // Clean up - stop and remove container, remove image
                sh "docker stop ${DOCKER_CONTAINER_NAME} || true"
                sh "docker rm ${DOCKER_CONTAINER_NAME} || true"
                sh "docker rmi ${DOCKER_IMAGE_NAME} || true"
            }
        }
    }
}
